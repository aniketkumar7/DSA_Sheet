// Interview Questions in OOPS

// Q1. What is Object Oriented Programming?
// A: OOP is a programming paradigm that organizes code into objects that contain both data and code.
// The main principles are: Encapsulation, Inheritance, Polymorphism and Abstraction.

// Q2. What is a Class?
// A: A class is a blueprint/template for creating objects. It defines the properties and behaviors objects will have.

// Q3. What is an Object?
// A: An object is an instance of a class that has state (attributes) and behavior (methods).

// Q4. What is Encapsulation?
// A: Encapsulation is bundling of data and the methods that operate on that data within a single unit (class).
// It restricts direct access to data members and methods from outside the class.

// Q5. What is Inheritance?
// A: Inheritance is a mechanism that allows a class to inherit properties and methods from another class.
// It supports code reusability and establishes relationships between classes.

// Q6. What is Polymorphism?
// A: Polymorphism means "many forms" and occurs when we have many classes that are related by inheritance.
// Types: Compile-time (Method Overloading) and Runtime (Method Overriding)

// Q7. What is Abstraction?
// A: Abstraction is hiding complex implementation details and showing only necessary features of an object.
// Can be achieved through abstract classes and interfaces.

// Q8. What is the difference between Abstract Class and Interface?
// A: Abstract class can have both abstract and concrete methods, while Interface can only have abstract methods.
// A class can implement multiple interfaces but can extend only one abstract class.

// Q9. What is Method Overloading?
// A: Method Overloading is having multiple methods with same name but different parameters in same class.

// Q10. What is Method Overriding?
// A: Method Overriding is redefining a method of parent class in child class with same signature.

// Q11. What is Constructor?
// A: Constructor is a special method that initializes object. It has same name as class and no return type.

// Q12. What is this keyword?
// A: 'this' refers to current object in a method or constructor.

// Q13. What is super keyword?
// A: 'super' is used to refer immediate parent class object.

// Q14. What is final keyword?
// A: final can be used with variables (constant), methods (can't override), classes (can't inherit)

// Q15. What is static keyword?
// A: static members belong to class rather than specific instance, can be accessed without creating object.

// Q16. What is Association, Aggregation and Composition?
// A: These represent relationships between classes
// Association: Loose connection (Teacher teaches Student)
// Aggregation: "has-a" relationship, independent existence (Department has Professors)
// Composition: Strong "has-a" relationship, dependent existence (House has Rooms)

// Q17. What is Access Modifiers?
// A: public: accessible everywhere
// private: accessible only within class
// protected: accessible in same package and subclasses
// default: accessible only in same package

// Q18. What is Exception Handling?
// A: Mechanism to handle runtime errors using try, catch, throw, throws, and finally blocks.

// Q19. What is Package?
// A: Package is a mechanism to organize related classes and interfaces together.

// Q20. What are the SOLID principles?
// A: S - Single Responsibility Principle
// O - Open/Closed Principle
// L - Liskov Substitution Principle
// I - Interface Segregation Principle
// D - Dependency Inversion Principle

// Q21. What is a Friend Class?
// A: Friend Class is a class that can access private and protected members of another class.
// Note: Friend class concept exists in C++ but not in Java.

// Q22. What is the difference between Abstract Class and Concrete Class?
// A: Abstract class can't be instantiated and may contain abstract methods.
// Concrete class can be instantiated and must implement all abstract methods.

// Q23. Can abstract class have constructor?
// A: Yes, abstract class can have constructor. It's called when concrete subclass is instantiated.

// Q24. Can interface have constructor?
// A: No, interface cannot have constructor as it cannot be instantiated.

// Q25. What is Marker Interface?
// A: Interface with no methods. Used to indicate something to compiler/JVM (e.g. Serializable, Cloneable)

// Q26. What is Diamond Problem in Multiple Inheritance?
// A: Ambiguity that arises when class inherits from two classes with same method.
// Java avoids it by not supporting multiple inheritance of classes.

// Q27. What is the difference between early and late binding?
// A: Early Binding (Static): Method call resolved at compile time (Method Overloading)
// Late Binding (Dynamic): Method call resolved at runtime (Method Overriding)

// Q28. What is Object Cloning?
// A: Creating exact copy of object. Can be done using clone() method.
// Types: Shallow Clone (copy references) and Deep Clone (copy actual objects)

// Q29. What is Coupling and Cohesion?
// A: Coupling: Degree of dependency between classes (low coupling is good)
// Cohesion: Degree to which elements inside class belong together (high cohesion is good)

// Q30. What is difference between Stack and Heap memory?
// A: Stack stores method calls and local variables
// Heap stores objects and class variables

// Q31. What is Garbage Collection?
// A: Automatic memory management process that removes unreferenced objects.

// Q32. What is Reflection in OOP?
// A: Ability to inspect and modify program structure and behavior at runtime.

// Q33. What is Singleton Pattern?
// A: Design pattern that ensures class has only one instance and provides global access point.

// Q34. What is Factory Pattern?
// A: Design pattern that creates objects without exposing creation logic to client.

// Q35. What is difference between Composition and Inheritance?
// A: Inheritance: "is-a" relationship, tight coupling
// Composition: "has-a" relationship, loose coupling, more flexible

// Q36. What is Method Hiding?
// A: When static method in subclass has same signature as static method in superclass.

// Q37. What is Upcasting and Downcasting?
// A: Upcasting: Converting subclass reference to superclass reference
// Downcasting: Converting superclass reference to subclass reference

// Q38. What is Immutable Class?
// A: Class whose objects cannot be modified after creation (e.g. String)

// Q39. What is difference between == and equals()?
// A: == compares object references
// equals() compares object content (if properly overridden)

// Q40. What is Anonymous Class?
// A: Class without name, declared and instantiated at same time.

